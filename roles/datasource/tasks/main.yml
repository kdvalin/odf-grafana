---
- name: Grant the grafana service account the prometheus-k8s
  command: "oc adm policy add-cluster-role-to-user prometheus-k8s -z {{ grafana_service_account }}"

- name: Determine the grafana service account's token name
  command: "oc -n {{ grafana_namespace }} get sa {{ grafana_service_account }} -o jsonpath='{.secrets[0].name}'"
  register: secret_name

- name: Fetch the token
  command: "oc -n {{ grafana_namespace }} get secret {{ secret_name.stdout }} -o jsonpath='{.metadata.annotations.openshift\\.io/token-secret\\.value}'"
  register: sa_secret

- name: Set the token from Service Account secret
  set_fact:
    token: "{{ sa_secret.stdout }}"
  when:
    - secret_name.rc == 0

- name: Show token
  debug:
    msg: "{{ token }}"

- name: Fail if we can't determine the token
  fail:
    msg: "Unable to get the token from the {{ grafana_service_account }} Service Account"
  when:
    - secret_name.rc > 0 

- name: Add Prometheus datasource to Grafana
  command:
    cmd: oc apply -f -
    stdin: "{{ lookup('template', 'prometheus_datasource.j2') }}"

- name: Add Infinity datasource to Grafana
  command:
    cmd: oc apply -f -
    stdin: "{{ lookup('template', 'infinity_datasource.j2') }}"
